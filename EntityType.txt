FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/json/deserialize/custom/CustomEntityChangedMessageDeserializer.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/json/deserialize/custom/CustomEntityChangedMessageDeserializer.java:        EntityType type = null;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/json/deserialize/custom/CustomEntityChangedMessageDeserializer.java:                    type = EntityType.valueOf(value.asText());
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/json/deserialize/custom/CustomEntityChangedMessageDeserializer.java:    private static Entity parseEntity(ObjectMapper mapper, JsonNode entityJson, EntityType entityType) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/json/mixin/AbstractEntityMixIn.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/json/mixin/AbstractEntityMixIn.java:    public EntityType getEntityType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/json/serialize/EntitySerializer.java:            LOGGER.warn("Null Accessor found for {}.{}. Missing @JsonIgnore?", entity.getEntityType(), property.getName());
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/messagebus/InternalMessageBus.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/messagebus/InternalMessageBus.java:        EntityType entityType = entity.getEntityType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/MqttManager.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/MqttManager.java:    private final Map<EntityType, Map<Subscription, AtomicInteger>> subscriptions = new EnumMap<>(EntityType.class);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/MqttManager.java:        for (EntityType entityType : EntityType.values()) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/MqttManager.java:        EntityType entityType = message.getEntityType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/MqttManager.java:            // for each subscription on EntityType check match
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/MqttManager.java:        if (!topic.endsWith(EntityType.OBSERVATION.plural) && !topic.endsWith(EntityType.TASK.plural)) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/MqttManager.java:        Map<Subscription, AtomicInteger> subscriptionsMap = subscriptions.get(subscription.getEntityType());
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/MqttManager.java:        final Map<Subscription, AtomicInteger> subscriptionsMap = subscriptions.get(subscription.getEntityType());
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/AbstractSubscription.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/AbstractSubscription.java:    private static Map<EntityType, List<NavigationPropertyMain>> navigationProperties = null;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/AbstractSubscription.java:    protected EntityType entityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/AbstractSubscription.java:            navigationProperties = new EnumMap<>(EntityType.class);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/AbstractSubscription.java:            for (EntityType type : EntityType.values()) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/AbstractSubscription.java:        if (!newEntity.getEntityType().equals(entityType)) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/AbstractSubscription.java:        EntityType lastType = getEntityType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/AbstractSubscription.java:            final NavigationPropertyMain navProp = PathHelper.getNavigationProperty(lastType, epe.getEntityType());
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/AbstractSubscription.java:            lastType = epe.getEntityType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/AbstractSubscription.java:    public EntityType getEntityType() {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/EntitySetSubscription.java:        entityType = ((PathElementEntitySet) path.getLastElement()).getEntityType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/EntitySubscription.java:        entityType = ((PathElementEntity) path.getLastElement()).getEntityType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/PropertySubscription.java:        entityType = ((PathElementEntity) path.get(size - 2)).getEntityType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/Subscription.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/mqtt/subscription/Subscription.java:    EntityType getEntityType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:    private void addAsEntitiy(ResourcePath rp, SimpleNode node, EntityType type) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        epa.setEntityType(type);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:    private void addAsEntitiySet(ResourcePath rp, EntityType type) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        espa.setEntityType(type);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.ACTUATOR);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.ACTUATOR);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.DATASTREAM);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.DATASTREAM);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.MULTIDATASTREAM);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.MULTIDATASTREAM);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.FEATUREOFINTEREST);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.FEATUREOFINTEREST);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.HISTORICALLOCATION);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.HISTORICALLOCATION);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.LOCATION);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.LOCATION);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.SENSOR);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.SENSOR);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.PARTY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.PARTY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.TASK);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.TASK);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.TASKINGCAPABILITY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.TASKINGCAPABILITY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.THING);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.THING);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.OBSERVATION);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.OBSERVATION);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiy(data, node, EntityType.OBSERVEDPROPERTY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/parser/path/PathParser.java:        addAsEntitiySet(data, EntityType.OBSERVEDPROPERTY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/AbstractPersistenceManager.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/AbstractPersistenceManager.java:    private Entity fetchEntity(EntityType entityType, Id id) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/AbstractPersistenceManager.java:                    entity.getEntityType(),
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/AbstractPersistenceManager.java:        path.addPathElement(new PathElementEntitySet(pathElement.getEntityType(), null), false, false);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/AbstractPersistenceManager.java:                    entity.getEntityType(),
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/PersistenceManager.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/PersistenceManager.java:    public Entity get(EntityType entityType, Id id);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/query/Expand.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/query/Expand.java:        EntityType entityType = path.getMainElementType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/query/Expand.java:    protected void validate(EntityType entityType) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/query/Query.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/query/Query.java:        EntityType entityType = path.getMainElementType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/query/Query.java:    protected void validate(EntityType entityType) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/service/Service.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/service/Service.java:            for (EntityType entityType : EntityType.values()) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/service/Service.java:        EntityType type = mainSet.getEntityType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/service/Service.java:            entity = entityParser.parseEntity(mainElement.getEntityType().getImplementingClass(), request.getContent());
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/service/Service.java:            entity = entityParser.parseEntity(mainElement.getEntityType().getImplementingClass(), request.getContent());
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/CustomLinksHelper.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/CustomLinksHelper.java:            Arrays.asList(EntityType.values())
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/CustomLinksHelper.java:     * Takes a string in the for of "[linkName].[EntityTypeName]" and returns
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/CustomLinksHelper.java:     * the EntityType, or null if the string is not in the required form.
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/CustomLinksHelper.java:     * @return The EntityType of the link.
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/CustomLinksHelper.java:    public static EntityType getTypeForCustomLinkName(String name) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/CustomLinksHelper.java:        return EntityType.getEntityTypeForName(last);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/CustomLinksHelper.java:                    EntityType type = EntityType.getEntityTypeForName(matcher.group(2));
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/CustomLinksHelper.java:                    EntityType type = EntityType.getEntityTypeForName(matcher.group(2));
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/ParserHelper.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/ParserHelper.java:        EntityType typeForCustomLink = CustomLinksHelper.getTypeForCustomLinkName(decodedName);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:    private static final Map<EntityType, Map<EntityType, NavigationPropertyMain>> NAVIGATION_MAP = new EnumMap<>(EntityType.class);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        Map<EntityType, NavigationPropertyMain> navPropsForType = getNavPropsForType(EntityType.ACTUATOR);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.TASKINGCAPABILITY, NavigationPropertyMain.TASKINGCAPABILITIES);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType = getNavPropsForType(EntityType.DATASTREAM);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.SENSOR, NavigationPropertyMain.SENSOR);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.PARTY, NavigationPropertyMain.PARTY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.OBSERVEDPROPERTY, NavigationPropertyMain.OBSERVEDPROPERTY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.OBSERVATION, NavigationPropertyMain.OBSERVATIONS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.THING, NavigationPropertyMain.THING);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType = getNavPropsForType(EntityType.MULTIDATASTREAM);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.SENSOR, NavigationPropertyMain.SENSOR);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.PARTY, NavigationPropertyMain.PARTY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.OBSERVEDPROPERTY, NavigationPropertyMain.OBSERVEDPROPERTIES);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.OBSERVATION, NavigationPropertyMain.OBSERVATIONS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.THING, NavigationPropertyMain.THING);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType = getNavPropsForType(EntityType.TASK);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.TASKINGCAPABILITY, NavigationPropertyMain.TASKINGCAPABILITY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType = getNavPropsForType(EntityType.TASKINGCAPABILITY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.ACTUATOR, NavigationPropertyMain.ACTUATOR);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.TASK, NavigationPropertyMain.TASKS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.THING, NavigationPropertyMain.THING);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType = getNavPropsForType(EntityType.THING);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.HISTORICALLOCATION, NavigationPropertyMain.HISTORICALLOCATIONS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.LOCATION, NavigationPropertyMain.LOCATIONS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.DATASTREAM, NavigationPropertyMain.DATASTREAMS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.MULTIDATASTREAM, NavigationPropertyMain.MULTIDATASTREAMS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.TASKINGCAPABILITY, NavigationPropertyMain.TASKINGCAPABILITIES);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType = getNavPropsForType(EntityType.LOCATION);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.THING, NavigationPropertyMain.THINGS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.HISTORICALLOCATION, NavigationPropertyMain.HISTORICALLOCATIONS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType = getNavPropsForType(EntityType.HISTORICALLOCATION);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.THING, NavigationPropertyMain.THINGS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.LOCATION, NavigationPropertyMain.LOCATIONS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType = getNavPropsForType(EntityType.SENSOR);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.DATASTREAM, NavigationPropertyMain.DATASTREAMS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.MULTIDATASTREAM, NavigationPropertyMain.MULTIDATASTREAMS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType = getNavPropsForType(EntityType.PARTY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.DATASTREAM, NavigationPropertyMain.DATASTREAMS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.MULTIDATASTREAM, NavigationPropertyMain.MULTIDATASTREAMS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType = getNavPropsForType(EntityType.OBSERVEDPROPERTY);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.DATASTREAM, NavigationPropertyMain.DATASTREAMS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.MULTIDATASTREAM, NavigationPropertyMain.MULTIDATASTREAMS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType = getNavPropsForType(EntityType.OBSERVATION);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.DATASTREAM, NavigationPropertyMain.DATASTREAM);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.MULTIDATASTREAM, NavigationPropertyMain.MULTIDATASTREAM);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.FEATUREOFINTEREST, NavigationPropertyMain.FEATUREOFINTEREST);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType = getNavPropsForType(EntityType.FEATUREOFINTEREST);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        navPropsForType.put(EntityType.OBSERVATION, NavigationPropertyMain.OBSERVATIONS);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:    private static Map<EntityType, NavigationPropertyMain> getNavPropsForType(EntityType source) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:                t -> new EnumMap<>(EntityType.class)
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:    public static NavigationPropertyMain getNavigationProperty(EntityType source, EntityType destination) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/PathHelper.java:        Map<EntityType, NavigationPropertyMain> destMap = NAVIGATION_MAP.get(source);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/UrlHelper.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/UrlHelper.java:    public static String generateSelfLink(String serviceRootUrl, EntityType entityType, Object id) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/UrlHelper.java:    public static String generateSelfLink(String serviceRootUrl, EntityType entityType, Id id) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/UrlHelper.java:        return generateSelfLink(serviceRootUrl, entity.getEntityType(), entity.getId());
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/UrlHelper.java:        String result = generateSelfLink(path, parent) + "/" + entity.getEntityType().entityName;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/UrlHelper.java:        String result = generateSelfLink(path, parent) + "/" + es.getEntityType().plural;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/VisibilityHelper.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/VisibilityHelper.java:    private final Map<EntityType, Set<Property>> enabledProperties = new EnumMap<>(EntityType.class);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/VisibilityHelper.java:        Visibility v = createVisibility(entity.getEntityType(), query, true);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/VisibilityHelper.java:        EntityType type = entitySet.asList().get(0).getEntityType();
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/VisibilityHelper.java:    private Visibility createVisibility(EntityType entityType, Query query, boolean topLevel) {
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/VisibilityHelper.java:        Set<Property> properties = getPropertiesForEntityType(entityType);
FROST-Server.Core/src/main/java/de/fraunhofer/iosb/ilt/frostserver/util/VisibilityHelper.java:    private Set<Property> getPropertiesForEntityType(EntityType entityType) {
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/deserialize/EntityParserTest.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/deserialize/EntityParserTest.java:        EntitySet<Thing> things = new EntitySetImpl<>(EntityType.THING);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/messagebus/MessageSerialisationTest.java:        for (NavigationPropertyMain property : entity.getEntityType().getNavigationEntities()) {
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntitySet espe = new PathElementEntitySet(EntityType.THING, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntitySet espe = new PathElementEntitySet(EntityType.THING, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        for (EntityType entityType : EntityType.values()) {
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntitySet espe = new PathElementEntitySet(EntityType.THING, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntity epe = new PathElementEntity(new IdLong(1), EntityType.THING, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:            PathElementEntitySet espe = new PathElementEntitySet(EntityType.THING, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:            PathElementEntity epe = new PathElementEntity(new IdLong(1), EntityType.THING, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:            PathElementEntitySet espe = new PathElementEntitySet(EntityType.THING, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:            PathElementEntity epe = new PathElementEntity(new IdLong(1), EntityType.THING, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:            PathElementEntitySet espe = new PathElementEntitySet(EntityType.THING, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:            PathElementEntity epe = new PathElementEntity(new IdLong(1), EntityType.THING, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:            PathElementEntitySet espe = new PathElementEntitySet(EntityType.THING, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:            PathElementEntity epe = new PathElementEntity(new IdLong(1), EntityType.THING, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:            PathElementEntitySet espe = new PathElementEntitySet(EntityType.THING, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:            PathElementEntity epe = new PathElementEntity(new IdLong(1), EntityType.THING, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntitySet espe = new PathElementEntitySet(EntityType.OBSERVATION, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntity epe = new PathElementEntity(new IdLong(1), EntityType.OBSERVATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.OBSERVATION, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(1), EntityType.OBSERVATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.OBSERVATION, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(1), EntityType.OBSERVATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.OBSERVATION, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(1), EntityType.OBSERVATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.OBSERVATION, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(1), EntityType.OBSERVATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.OBSERVATION, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(1), EntityType.OBSERVATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntitySet espe = new PathElementEntitySet(EntityType.THING, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntity epe = new PathElementEntity(new IdLong(1), EntityType.THING, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.LOCATION, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(2), EntityType.LOCATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.HISTORICALLOCATION, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(3), EntityType.HISTORICALLOCATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(null, EntityType.THING, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.DATASTREAM, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(5), EntityType.DATASTREAM, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(null, EntityType.SENSOR, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.DATASTREAM, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(6), EntityType.DATASTREAM, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(null, EntityType.OBSERVEDPROPERTY, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.DATASTREAM, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(7), EntityType.DATASTREAM, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.OBSERVATION, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(8), EntityType.OBSERVATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(null, EntityType.FEATUREOFINTEREST, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntitySet espe = new PathElementEntitySet(EntityType.FEATUREOFINTEREST, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntity epe = new PathElementEntity(new IdLong(1), EntityType.FEATUREOFINTEREST, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.OBSERVATION, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(2), EntityType.OBSERVATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(null, EntityType.DATASTREAM, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(null, EntityType.THING, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.HISTORICALLOCATION, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(3), EntityType.HISTORICALLOCATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.LOCATION, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(4), EntityType.LOCATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.THING, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(1), EntityType.THING, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntitySet espe = new PathElementEntitySet(EntityType.THING, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntity epe = new PathElementEntity(new IdLong(1), EntityType.THING, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.LOCATION, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(2), EntityType.LOCATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.HISTORICALLOCATION, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(3), EntityType.HISTORICALLOCATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(null, EntityType.THING, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.MULTIDATASTREAM, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(5), EntityType.MULTIDATASTREAM, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(null, EntityType.SENSOR, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.MULTIDATASTREAM, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(6), EntityType.MULTIDATASTREAM, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.OBSERVEDPROPERTY, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(7), EntityType.OBSERVEDPROPERTY, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.MULTIDATASTREAM, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(8), EntityType.MULTIDATASTREAM, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.OBSERVATION, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(9), EntityType.OBSERVATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(null, EntityType.FEATUREOFINTEREST, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntitySet espe = new PathElementEntitySet(EntityType.FEATUREOFINTEREST, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntity epe = new PathElementEntity(new IdLong(1), EntityType.FEATUREOFINTEREST, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.OBSERVATION, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(2), EntityType.OBSERVATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(null, EntityType.MULTIDATASTREAM, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(null, EntityType.THING, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.HISTORICALLOCATION, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(3), EntityType.HISTORICALLOCATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.LOCATION, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(4), EntityType.LOCATION, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        espe = new PathElementEntitySet(EntityType.THING, epe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        epe = new PathElementEntity(new IdLong(1), EntityType.THING, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntitySet espe = new PathElementEntitySet(EntityType.THING, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntity epe = new PathElementEntity(new IdLong(id), EntityType.THING, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntitySet espe = new PathElementEntitySet(EntityType.THING, null);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/parser/PathParserTest.java:        PathElementEntity epe = new PathElementEntity(new IdString(id), EntityType.THING, espe);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setLocations(new EntitySetImpl(EntityType.LOCATION, "Things(1)/Locations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setDatastreams(new EntitySetImpl(EntityType.DATASTREAM, "Things(1)/Datastreams"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setHistoricalLocations(new EntitySetImpl(EntityType.THING, "Things(1)/HistoricalLocations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setLocations(new EntitySetImpl(EntityType.LOCATION, "Things(1)/Locations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setDatastreams(new EntitySetImpl(EntityType.DATASTREAM, "Things(1)/Datastreams"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setHistoricalLocations(new EntitySetImpl(EntityType.THING, "Things(1)/HistoricalLocations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setLocations(new EntitySetImpl(EntityType.LOCATION, "Things(1)/Locations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setDatastreams(new EntitySetImpl(EntityType.DATASTREAM, "Things(1)/Datastreams"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setHistoricalLocations(new EntitySetImpl(EntityType.HISTORICALLOCATION, "Things(1)/HistoricalLocations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:        EntitySet<Thing> things = new EntitySetImpl<>(EntityType.THING);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setLocations(new EntitySetImpl(EntityType.LOCATION, "Things(1)/Locations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setHistoricalLocations(new EntitySetImpl(EntityType.HISTORICALLOCATION, "Things(1)/HistoricalLocations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:        EntitySet<Thing> things = new EntitySetImpl<>(EntityType.THING);
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setLocations(new EntitySetImpl(EntityType.LOCATION, "Things(1)/Locations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setHistoricalLocations(new EntitySetImpl(EntityType.HISTORICALLOCATION, "Things(1)/HistoricalLocations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setLocations(new EntitySetImpl(EntityType.LOCATION, "Things(1)/Locations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setHistoricalLocations(new EntitySetImpl(EntityType.HISTORICALLOCATION, "Things(1)/HistoricalLocations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setLocations(new EntitySetImpl(EntityType.LOCATION, "Things(1)/Locations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setHistoricalLocations(new EntitySetImpl(EntityType.HISTORICALLOCATION, "Things(1)/HistoricalLocations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setLocations(new EntitySetImpl(EntityType.LOCATION, "Things(1)/Locations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setHistoricalLocations(new EntitySetImpl(EntityType.HISTORICALLOCATION, "Things(1)/HistoricalLocations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                    .setThings(new EntitySetImpl(EntityType.THING, "Locations(1)/Things"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                    .setHistoricalLocations(new EntitySetImpl(EntityType.HISTORICALLOCATION, "Locations(1)/HistoricalLocations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                    .setThings(new EntitySetImpl(EntityType.THING, "Locations(1)/Things"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                    .setHistoricalLocations(new EntitySetImpl(EntityType.HISTORICALLOCATION, "Locations(1)/HistoricalLocations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setThings(new EntitySetImpl(EntityType.THING, "Locations(1)/Things"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setHistoricalLocations(new EntitySetImpl(EntityType.HISTORICALLOCATION, "Locations(1)/HistoricalLocations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setLocations(new EntitySetImpl(EntityType.LOCATION, "HistoricalLocations(1)/Locations").setExportObject(false))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                        new EntitySetImpl(EntityType.OBSERVATION, "Datastreams(1)/Observations").setExportObject(false))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setObservations(new EntitySetImpl(EntityType.OBSERVATION, "Datastreams(1)/Observations").setExportObject(false))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setObservations(new EntitySetImpl(EntityType.OBSERVATION, "Datastreams(1)/Observations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setObservations(new EntitySetImpl(EntityType.OBSERVATION, "MultiDatastreams(1)/Observations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setObservedProperties(new EntitySetImpl(EntityType.OBSERVEDPROPERTY, "MultiDatastreams(1)/ObservedProperties"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setDatastreams(new EntitySetImpl(EntityType.DATASTREAM, "Sensors(1)/Datastreams"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setDatastreams(new EntitySetImpl(EntityType.DATASTREAM))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setDatastreams(new EntitySetImpl(EntityType.DATASTREAM, "Parties(1)/Datastreams"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setDatastreams(new EntitySetImpl(EntityType.DATASTREAM))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setDatastreams(new EntitySetImpl(EntityType.DATASTREAM, "ObservedProperties(1)/Datastreams"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setObservations(new EntitySetImpl(EntityType.OBSERVATION, "FeaturesOfInterest(1)/Observations"))
FROST-Server.Core/src/test/java/de/fraunhofer/iosb/ilt/frostserver/serialize/EntityFormatterTest.java:                .setObservations(new EntitySetImpl(EntityType.OBSERVATION, "FeaturesOfInterest(1)/Observations"))
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Actuator.java:        taskingCapabilities = new EntitySetImpl<>(EntityType.TASKINGCAPABILITY);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Actuator.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Actuator.java:        return EntityType.ACTUATOR;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/AbstractDatastream.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/AbstractDatastream.java:        this.observations = new EntitySetImpl<>(EntityType.OBSERVATION);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/AbstractDatastream.java:        switch (parentEntity.getEntityType()) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/AbstractDatastream.java:                LOGGER.error("Incorrect 'parent' entity type for {}: {}", getEntityType(), parentEntity.getEntityType());
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/AbstractEntity.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/AbstractEntity.java:        EntityType type = containingSet.getEntityType();
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/AbstractEntity.java:        if (type != getEntityType()) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/AbstractEntity.java:            throw new IllegalStateException("Set of type " + type + " can not contain a " + getEntityType());
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/Entity.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/Entity.java:    public EntityType getEntityType();
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/Entity.java:        EntityType type = getEntityType();
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/Entity.java:        EntityType type = getEntityType();
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/Entity.java:        epe.setEntityType(type);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/EntitySet.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/EntitySet.java:    public EntityType getEntityType();
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/EntitySetImpl.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/EntitySetImpl.java:    private EntityType type;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/EntitySetImpl.java:    public EntitySetImpl(EntityType type) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/EntitySetImpl.java:    public EntitySetImpl(EntityType type, String navigationLink) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/EntitySetImpl.java:    public EntitySetImpl(EntityType type, List<T> data) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/EntitySetImpl.java:            type = e.getEntityType();
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/EntitySetImpl.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/NamedDsHoldingEntity.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/NamedDsHoldingEntity.java:        this.datastreams = new EntitySetImpl<>(EntityType.DATASTREAM);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/NamedDsHoldingEntity.java:        this.multiDatastreams = new EntitySetImpl<>(EntityType.MULTIDATASTREAM);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/NamedDsHoldingEntity.java:            datastreams = new EntitySetImpl<>(EntityType.DATASTREAM);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/core/NamedDsHoldingEntity.java:            multiDatastreams = new EntitySetImpl<>(EntityType.MULTIDATASTREAM);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Datastream.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Datastream.java:        return EntityType.DATASTREAM;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Datastream.java:        if (parentEntity.getEntityType() == EntityType.OBSERVEDPROPERTY) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityChangedMessage.java:    private EntityType entityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityChangedMessage.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityChangedMessage.java:    public EntityChangedMessage setEntityType(EntityType entityType) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityChangedMessage.java:        this.entityType = entity.getEntityType();
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityType.java:public enum EntityType {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityType.java:    private static final Map<String, EntityType> TYPES_BY_NAME = new HashMap<>();
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityType.java:        for (EntityType type : EntityType.values()) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityType.java:    private EntityType(String singular, String plural, Extension extension, Class<? extends Entity> implementingClass) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityType.java:    public static EntityType getEntityTypeForName(String name) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/FeatureOfInterest.java:        this.observations = new EntitySetImpl<>(EntityType.OBSERVATION);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/FeatureOfInterest.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/FeatureOfInterest.java:        return EntityType.FEATUREOFINTEREST;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/HistoricalLocation.java:        this.locations = new EntitySetImpl<>(EntityType.LOCATION);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/HistoricalLocation.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/HistoricalLocation.java:        return EntityType.HISTORICALLOCATION;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/HistoricalLocation.java:        EntityType type = containingSet.getEntityType();
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/HistoricalLocation.java:        if (type != getEntityType()) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/HistoricalLocation.java:            throw new IllegalStateException("Set of type " + type + " can not contain a " + getEntityType());
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/HistoricalLocation.java:                if (parentEntity.getEntityType() == EntityType.THING) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/HistoricalLocation.java:                    LOGGER.error("Incorrect 'parent' entity type for {}: {}", getEntityType(), parentEntity.getEntityType());
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/HistoricalLocation.java:            throw new IncompleteEntityException(getEntityType() + " must have at least one Location.");
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Location.java:        this.things = new EntitySetImpl<>(EntityType.THING);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Location.java:        this.historicalLocations = new EntitySetImpl<>(EntityType.HISTORICALLOCATION);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Location.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Location.java:        return EntityType.LOCATION;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Location.java:                if (parentEntity.getEntityType() == EntityType.THING) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Location.java:                    LOGGER.error("Incorrect 'parent' entity type for {}: {}", getEntityType(), parentEntity.getEntityType());
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/MultiDatastream.java:        observedProperties = new EntitySetImpl<>(EntityType.OBSERVEDPROPERTY);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/MultiDatastream.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/MultiDatastream.java:        return EntityType.MULTIDATASTREAM;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/MultiDatastream.java:            observedProperties = new EntitySetImpl<>(EntityType.OBSERVEDPROPERTY);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Observation.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Observation.java:        return EntityType.OBSERVATION;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Observation.java:                switch (parentEntity.getEntityType()) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Observation.java:                        LOGGER.error("Incorrect 'parent' entity type for {}: {}", getEntityType(), parentEntity.getEntityType());
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/ObservedProperty.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/ObservedProperty.java:        return EntityType.OBSERVEDPROPERTY;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Party.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Party.java:        return EntityType.PARTY;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Sensor.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Sensor.java:        return EntityType.SENSOR;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Task.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Task.java:        return EntityType.TASK;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Task.java:                if (parentEntity.getEntityType() == EntityType.TASKINGCAPABILITY) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Task.java:                    LOGGER.error("Incorrect 'parent' entity type for {}: {}", getEntityType(), parentEntity.getEntityType());
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/TaskingCapability.java:        this.tasks = new EntitySetImpl<>(EntityType.TASK);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/TaskingCapability.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/TaskingCapability.java:        return EntityType.TASKINGCAPABILITY;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/TaskingCapability.java:        switch (parentEntity.getEntityType()) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/TaskingCapability.java:                LOGGER.error("Incorrect 'parent' entity type for {}: {}", getEntityType(), parentEntity.getEntityType());
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Thing.java:        this.locations = new EntitySetImpl<>(EntityType.LOCATION);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Thing.java:        this.historicalLocations = new EntitySetImpl<>(EntityType.HISTORICALLOCATION);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Thing.java:        this.taskingCapabilities = new EntitySetImpl<>(EntityType.TASKINGCAPABILITY);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Thing.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Thing.java:        return EntityType.THING;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Thing.java:            locations = new EntitySetImpl<>(EntityType.LOCATION);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Thing.java:            historicalLocations = new EntitySetImpl<>(EntityType.HISTORICALLOCATION);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/model/Thing.java:            taskingCapabilities = new EntitySetImpl<>(EntityType.TASKINGCAPABILITY);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/PathElementEntity.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/PathElementEntity.java:    private EntityType entityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/PathElementEntity.java:    public PathElementEntity(Id id, EntityType entityType, PathElement parent) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/PathElementEntity.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/PathElementEntity.java:    public void setEntityType(EntityType entityType) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/PathElementEntitySet.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/PathElementEntitySet.java:    private EntityType entityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/PathElementEntitySet.java:    public PathElementEntitySet(EntityType entityType, PathElement parent) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/PathElementEntitySet.java:    public EntityType getEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/PathElementEntitySet.java:    public void setEntityType(EntityType entityType) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/ResourcePath.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/ResourcePath.java:    public EntityType getMainElementType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/ResourcePath.java:            return entityPathElement.getEntityType();
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/path/ResourcePath.java:            return entitySetPathElement.getEntityType();
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/CustomPropertyLink.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/CustomPropertyLink.java:    private final EntityType targetEntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/CustomPropertyLink.java:    public CustomPropertyLink(String name, EntityType targetEntityType) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/CustomPropertyLink.java:        this.targetEntityType = targetEntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/CustomPropertyLink.java:    public EntityType getTargetEntityType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/CustomPropertyLink.java:        return targetEntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationProperty.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationProperty.java:    public EntityType getType();
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationProperty.java:    public boolean validFor(EntityType entityType);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyCustom.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyCustom.java:    private EntityType type;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyCustom.java:    public EntityType getType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyCustom.java:        type = EntityType.getEntityTypeForName(typeName);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyCustom.java:    public boolean validFor(EntityType entityType) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyCustom.java:        public void findLinkTargetData(Entity<?> entity, EntityProperty entityProperty, List<String> subPath, String name, EntityType type) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyCustom.java:        private void findLinkEntryInMap(Map<String, Object> map, String name, EntityType type) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    ACTUATOR("Actuator", EntityType.ACTUATOR, false),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    ACTUATORS("Actuators", EntityType.ACTUATOR, true),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    DATASTREAM("Datastream", EntityType.DATASTREAM, false),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    DATASTREAMS("Datastreams", EntityType.DATASTREAM, true),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    MULTIDATASTREAM("MultiDatastream", EntityType.MULTIDATASTREAM, false),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    MULTIDATASTREAMS("MultiDatastreams", EntityType.MULTIDATASTREAM, true),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    FEATUREOFINTEREST("FeatureOfInterest", EntityType.FEATUREOFINTEREST, false),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    HISTORICALLOCATIONS("HistoricalLocations", EntityType.HISTORICALLOCATION, true),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    LOCATION("Location", EntityType.LOCATION, false),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    LOCATIONS("Locations", EntityType.LOCATION, true),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    OBSERVATIONS("Observations", EntityType.OBSERVATION, true),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    OBSERVEDPROPERTY("ObservedProperty", EntityType.OBSERVEDPROPERTY, false),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    OBSERVEDPROPERTIES("ObservedProperties", EntityType.OBSERVEDPROPERTY, true),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    SENSOR("Sensor", EntityType.SENSOR, false),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    PARTY("Party", EntityType.PARTY, false),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    TASK("Task", EntityType.TASK, false),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    TASKS("Tasks", EntityType.TASK, true),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    TASKINGCAPABILITY("TaskingCapability", EntityType.TASKINGCAPABILITY, false),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    TASKINGCAPABILITIES("TaskingCapabilities", EntityType.TASKINGCAPABILITY, true),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    THING("Thing", EntityType.THING, false),
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    THINGS("Things", EntityType.THING, true);
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    private final EntityType type;
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    private NavigationPropertyMain(String propertyName, EntityType type, boolean isSet) {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    public EntityType getType() {
FROST-Server.Core.Model/src/main/java/de/fraunhofer/iosb/ilt/frostserver/property/NavigationPropertyMain.java:    public boolean validFor(EntityType entityType) {
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:        EntitySetImpl<Actuator> actuators = new EntitySetImpl<>(EntityType.ACTUATOR);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:        EntitySetImpl<Datastream> datastreams = new EntitySetImpl<>(EntityType.DATASTREAM);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:        EntitySetImpl<HistoricalLocation> histLocations = new EntitySetImpl<>(EntityType.HISTORICALLOCATION);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:        EntitySetImpl<Location> locations = new EntitySetImpl<>(EntityType.LOCATION);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:        EntitySetImpl<MultiDatastream> multiDatastreams = new EntitySetImpl<>(EntityType.MULTIDATASTREAM);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:        EntitySetImpl<Observation> observations = new EntitySetImpl<>(EntityType.OBSERVATION);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:        EntitySetImpl<ObservedProperty> obsProperties = new EntitySetImpl<>(EntityType.OBSERVEDPROPERTY);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:        EntitySetImpl<Task> tasks = new EntitySetImpl<>(EntityType.TASK);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:        EntitySetImpl<TaskingCapability> taskingCapabilities = new EntitySetImpl<>(EntityType.TASKINGCAPABILITY);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:        EntitySetImpl<Thing> things = new EntitySetImpl<>(EntityType.THING);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:        for (EntityType type : EntityType.values()) {
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:            testEntityType(type, type.getPropertySet());
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:    private void testEntityType(EntityType type, Set<Property> collectedProperties) {
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:                Assert.fail("Property " + property + " returned false for isSet on entity type " + entity.getEntityType());
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityBuilderTest.java:                Assert.fail("Getter did not return set value for property " + property + " on entity type " + entity.getEntityType());
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityCompleteTest.java:        PathElementEntitySet containingSet = new PathElementEntitySet(EntityType.MULTIDATASTREAM, null);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityCompleteTest.java:        EntitySet<ObservedProperty> observedProperties = new EntitySetImpl<>(EntityType.OBSERVEDPROPERTY);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityCompleteTest.java:        Assert.assertTrue(isEntityComplete(entity, new PathElementEntitySet(EntityType.MULTIDATASTREAM, new PathElementEntity(new IdLong(2), EntityType.THING, null))));
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityCompleteTest.java:        Assert.assertFalse(isEntityComplete(entity, new PathElementEntitySet(EntityType.DATASTREAM, null)));
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityCompleteTest.java:        PathElementEntitySet containingSet = new PathElementEntitySet(EntityType.OBSERVATION, null);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityCompleteTest.java:        Assert.assertFalse(isEntityComplete(entity, new PathElementEntitySet(EntityType.DATASTREAM, null)));
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityCompleteTest.java:        containingSet = new PathElementEntitySet(EntityType.OBSERVATION, new PathElementEntity(new IdLong(1), EntityType.DATASTREAM, null));
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/EntityCompleteTest.java:        containingSet = new PathElementEntitySet(EntityType.OBSERVATION, new PathElementEntity(new IdLong(1), EntityType.MULTIDATASTREAM, null));
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:        EntitySetImpl<Actuator> actuators = new EntitySetImpl<>(EntityType.ACTUATOR);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:        EntitySetImpl<Datastream> datastreams = new EntitySetImpl<>(EntityType.DATASTREAM);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:        EntitySetImpl<HistoricalLocation> histLocations = new EntitySetImpl<>(EntityType.HISTORICALLOCATION);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:        EntitySetImpl<Location> locations = new EntitySetImpl<>(EntityType.LOCATION);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:        EntitySetImpl<MultiDatastream> multiDatastreams = new EntitySetImpl<>(EntityType.MULTIDATASTREAM);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:        EntitySetImpl<Observation> observations = new EntitySetImpl<>(EntityType.OBSERVATION);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:        EntitySetImpl<ObservedProperty> obsProperties = new EntitySetImpl<>(EntityType.OBSERVEDPROPERTY);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:        EntitySetImpl<Task> tasks = new EntitySetImpl<>(EntityType.TASK);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:        EntitySetImpl<TaskingCapability> taskingCapabilities = new EntitySetImpl<>(EntityType.TASKINGCAPABILITY);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:        EntitySetImpl<Thing> things = new EntitySetImpl<>(EntityType.THING);
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:        for (EntityType type : EntityType.values()) {
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:            testEntityType(type, type.getPropertySet());
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:    private void testEntityType(EntityType type, Set<Property> collectedProperties) {
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:    private void testEntityCompare(EntityType type, Set<Property> collectedProperties) {
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:                Assert.fail("Diff claims that Property: " + entity.getEntityType() + "/" + p + " did not change.");
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:                Assert.fail("Diff claims that Property: " + entity.getEntityType() + "/" + p + " did change.");
FROST-Server.Core.Model/src/test/java/de/fraunhofer/iosb/ilt/frostserver/model/TestIsSetProperty.java:                Assert.fail("Property " + property + " returned false for isSet on entity type " + entity.getEntityType());
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ActuatorFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ActuatorFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ActuatorFactory.java:        return EntityType.ACTUATOR;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/DatastreamFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/DatastreamFactory.java:                throw new NoSuchEntityException(EntityType.OBSERVATION.entityName + NO_ID_OR_NOT_FOUND);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/DatastreamFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/DatastreamFactory.java:        return EntityType.DATASTREAM;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:    private final Map<EntityType, EntityFactory<? extends Entity, J>> factoryPerEntity = new EnumMap<>(EntityType.class);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.ACTUATOR, actuatorFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.DATASTREAM, datastreamFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.FEATUREOFINTEREST, featureOfInterestFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.HISTORICALLOCATION, historicalLocationFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.LOCATION, locationFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.MULTIDATASTREAM, multiDatastreamFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.OBSERVATION, observationFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.OBSERVEDPROPERTY, observedPropertyFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.SENSOR, sensorFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.PARTY, partyFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.TASK, taskFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.TASKINGCAPABILITY, taskingCapabilityFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        factoryPerEntity.put(EntityType.THING, thingFactory);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        EntitySet<T> entitySet = new EntitySetImpl<>(factory.getEntityType());
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:    public <T extends Entity<T>> EntityFactory<T, J> getFactoryFor(EntityType type) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:            throw new NoSuchEntityException("No such entity '" + e.getEntityType() + "' with id " + e.getId().getValue());
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:    public boolean entityExists(PostgresPersistenceManager<J> pm, EntityType type, Id entityId) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactories.java:        return entityExists(pm, e.getEntityType(), e.getId());
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactory.java:     * Get the EntityType of the Entities created by this factory.
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactory.java:     * @return The EntityType of the Entities created by this factory.
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/EntityFactory.java:    public EntityType getEntityType();
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/FeatureOfInterestFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/FeatureOfInterestFactory.java:                throw new NoSuchEntityException(EntityType.OBSERVATION.entityName + NO_ID_OR_NOT_FOUND);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/FeatureOfInterestFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/FeatureOfInterestFactory.java:        return EntityType.FEATUREOFINTEREST;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/HistoricalLocationFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/HistoricalLocationFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/HistoricalLocationFactory.java:        return EntityType.HISTORICALLOCATION;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/LocationFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/LocationFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/LocationFactory.java:        return EntityType.LOCATION;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/MultiDatastreamFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/MultiDatastreamFactory.java:        MultiDatastream original = (MultiDatastream) pm.get(EntityType.MULTIDATASTREAM, entityFactories.idFromObject(mdsId));
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/MultiDatastreamFactory.java:                throw new NoSuchEntityException(EntityType.OBSERVATION.entityName + NO_ID_OR_NOT_FOUND);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/MultiDatastreamFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/MultiDatastreamFactory.java:        return EntityType.MULTIDATASTREAM;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ObservationFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ObservationFactory.java:        Observation oldObservation = (Observation) pm.get(EntityType.OBSERVATION, entityFactories.idFromObject(id));
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ObservationFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ObservationFactory.java:        return EntityType.OBSERVATION;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ObservedPropertyFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ObservedPropertyFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ObservedPropertyFactory.java:        return EntityType.OBSERVEDPROPERTY;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/PartyFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/PartyFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/PartyFactory.java:        return EntityType.PARTY;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/SensorFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/SensorFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/SensorFactory.java:        return EntityType.SENSOR;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/TaskFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/TaskFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/TaskFactory.java:        return EntityType.TASK;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/TaskingCapabilityFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/TaskingCapabilityFactory.java:                throw new NoSuchEntityException(EntityType.OBSERVATION.entityName + NO_ID_OR_NOT_FOUND);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/TaskingCapabilityFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/TaskingCapabilityFactory.java:        return EntityType.TASKINGCAPABILITY;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ThingFactory.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ThingFactory.java:            HistoricalLocation newHl = (HistoricalLocation) pm.get(EntityType.HISTORICALLOCATION, pm.getIdManager().fromObject(histLocationId));
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ThingFactory.java:    public EntityType getEntityType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/factories/ThingFactory.java:        return EntityType.THING;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PgExpressionHandler.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PgExpressionHandler.java:        EntityType targetEntityType = ((CustomPropertyLink) property).getTargetEntityType();
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PgExpressionHandler.java:        state.pathTableRef = queryBuilder.queryEntityType(targetEntityType, state.pathTableRef, sourceIdField);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PgExpressionHandler.java:        state.pathTableRef = queryBuilder.queryEntityType(navigationProperty.getType(), null, state.pathTableRef);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PostgresPersistenceManager.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PostgresPersistenceManager.java:                    if (!getEntityFactories().entityExists(this, entityPathElement.getEntityType(), id)) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PostgresPersistenceManager.java:    public Entity get(EntityType entityType, Id id) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PostgresPersistenceManager.java:    public Entity get(EntityType entityType, Id id, Query query) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PostgresPersistenceManager.java:    private Entity get(EntityType entityType, Id id, boolean forUpdate, Query query) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PostgresPersistenceManager.java:        EntityFactory<Entity, J> factory = ef.getFactoryFor(entity.getEntityType());
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PostgresPersistenceManager.java:            throw new NoSuchEntityException("No entity of type " + pathElement.getEntityType() + " with id " + id);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PostgresPersistenceManager.java:        EntityFactory<Entity, J> factory = ef.getFactoryFor(entity.getEntityType());
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PostgresPersistenceManager.java:        final EntityType entityType = pathElement.getEntityType();
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/PostgresPersistenceManager.java:        EntityType type = pathElement.getEntityType();
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/QueryBuilder.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/QueryBuilder.java:    private EntityType requestedEntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/QueryBuilder.java:        final StaMainTable<J> table = tableCollection.getTablesByType().get(set.getEntityType());
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/QueryBuilder.java:            throw new AssertionError("Don't know how to delete" + set.getEntityType().name(), new IllegalArgumentException("Unknown type for delete"));
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/QueryBuilder.java:    public QueryBuilder<J> forTypeAndId(EntityType entityType, Id id) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/QueryBuilder.java:        requestedEntityType = entityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/QueryBuilder.java:        lastPath = queryEntityType(requestedEntityType, requestedId, lastPath);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/QueryBuilder.java:        lastPath = queryEntityType(element.getEntityType(), element.getId(), lastPath);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/QueryBuilder.java:        lastPath = queryEntityType(element.getEntityType(), null, lastPath);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/QueryBuilder.java:    public TableRef<J> queryEntityType(EntityType type, Id targetId, TableRef<J> last) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/QueryBuilder.java:    public TableRef<J> queryEntityType(EntityType targetType, TableRef<J> sourceRef, Field sourceIdField) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/QueryBuilder.java:    public static <J extends Comparable> TableRef<J> createJoinedRef(TableRef<J> base, EntityType type, StaMainTable<J> table) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/relations/RelationManyToMany.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/relations/RelationManyToMany.java:    private final EntityType targetType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/relations/RelationManyToMany.java:            EntityType targetType) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/relations/RelationManyToManyOrdered.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/relations/RelationManyToManyOrdered.java:    private final EntityType targetType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/relations/RelationManyToManyOrdered.java:            EntityType targetType) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/relations/RelationOneToMany.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/relations/RelationOneToMany.java:    private final EntityType targetType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/relations/RelationOneToMany.java:    public RelationOneToMany(S source, T target, EntityType targetType) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/relations/RelationOneToMany.java:    public RelationOneToMany(S source, T target, EntityType targetType, boolean distinctRequired) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/ResultBuilder.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/ResultBuilder.java:        factory = pm.getEntityFactories().getFactoryFor(element.getEntityType());
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/ResultBuilder.java:    private Entity loadEntity(EntityType type, Object id, Expand expand) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/ResultBuilder.java:        PathElement parentCollection = new PathElementEntitySet(entity.getEntityType(), null);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/ResultBuilder.java:        PathElement parent = new PathElementEntity(entity.getId(), entity.getEntityType(), parentCollection);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/ResultBuilder.java:            factory = pm.getEntityFactories().getFactoryFor(element.getEntityType());
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/TableRef.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/TableRef.java:    private final EntityType type;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/TableRef.java:    private final Map<EntityType, TableRef<J>> joins = new EnumMap(EntityType.class);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/TableRef.java:    public TableRef(EntityType type, StaMainTable<J> table) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/TableRef.java:    public EntityType getType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/TableRef.java:    public void addJoin(EntityType link, TableRef<J> joinedTable) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/TableRef.java:    public TableRef<J> getJoin(EntityType link) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableActuators.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableActuators.java:                new RelationOneToMany<>(this, tables.getTableTaskingCapabilities(), EntityType.TASKINGCAPABILITY, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableDatastreams.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableDatastreams.java:                new RelationOneToMany<>(this, tables.getTableThings(), EntityType.THING)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableDatastreams.java:                new RelationOneToMany<>(this, tables.getTableSensors(), EntityType.SENSOR)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableDatastreams.java:                new RelationOneToMany<>(this, tables.getTableParties(), EntityType.PARTY)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableDatastreams.java:                new RelationOneToMany<>(this, tables.getTableObsProperties(), EntityType.OBSERVEDPROPERTY)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableDatastreams.java:                new RelationOneToMany<>(this, tables.getTableObservations(), EntityType.OBSERVATION, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableFeatures.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableFeatures.java:                new RelationOneToMany<>(this, tables.getTableObservations(), EntityType.OBSERVATION, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableHistLocations.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableHistLocations.java:                new RelationOneToMany<>(this, tables.getTableThings(), EntityType.THING)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableHistLocations.java:                new RelationManyToMany<>(this, tables.getTableLocationsHistLocations(), tables.getTableLocations(), EntityType.LOCATION)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableLocations.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableLocations.java:                new RelationManyToMany<>(this, tables.getTableThingsLocations(), tables.getTableThings(), EntityType.THING)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableLocations.java:                new RelationManyToMany<>(this, tables.getTableLocationsHistLocations(), tables.getTableHistLocations(), EntityType.HISTORICALLOCATION)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableMultiDatastreams.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableMultiDatastreams.java:                new RelationOneToMany<>(this, tables.getTableThings(), EntityType.THING)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableMultiDatastreams.java:                new RelationOneToMany<>(this, tables.getTableSensors(), EntityType.SENSOR)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableMultiDatastreams.java:                new RelationOneToMany<>(this, tables.getTableParties(), EntityType.PARTY)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableMultiDatastreams.java:                new RelationManyToMany<>(this, tables.getTableMultiDatastreamsObsProperties(), tables.getTableObsProperties(), EntityType.OBSERVEDPROPERTY)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableMultiDatastreams.java:                new RelationOneToMany<>(this, tables.getTableObservations(), EntityType.OBSERVATION, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableObservations.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableObservations.java:                new RelationOneToMany<>(this, tables.getTableDatastreams(), EntityType.DATASTREAM)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableObservations.java:                new RelationOneToMany<>(this, tables.getTableMultiDatastreams(), EntityType.MULTIDATASTREAM)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableObservations.java:                new RelationOneToMany<>(this, tables.getTableFeatures(), EntityType.FEATUREOFINTEREST)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableObsProperties.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableObsProperties.java:                new RelationOneToMany<>(this, tables.getTableDatastreams(), EntityType.DATASTREAM, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableObsProperties.java:                        EntityType.MULTIDATASTREAM)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableParties.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableParties.java:                new RelationOneToMany<>(this, tables.getTableDatastreams(), EntityType.DATASTREAM, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableParties.java:                new RelationOneToMany<>(this, tables.getTableMultiDatastreams(), EntityType.MULTIDATASTREAM, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableSensors.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableSensors.java:                new RelationOneToMany<>(this, tables.getTableDatastreams(), EntityType.DATASTREAM, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableSensors.java:                new RelationOneToMany<>(this, tables.getTableMultiDatastreams(), EntityType.MULTIDATASTREAM, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableTaskingCapabilities.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableTaskingCapabilities.java:                new RelationOneToMany<>(this, tables.getTableThings(), EntityType.THING)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableTaskingCapabilities.java:                new RelationOneToMany<>(this, tables.getTableActuators(), EntityType.ACTUATOR)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableTaskingCapabilities.java:                new RelationOneToMany<>(this, tables.getTableTasks(), EntityType.TASK, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableTasks.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableTasks.java:                new RelationOneToMany<>(this, tables.getTableTaskingCapabilities(), EntityType.TASKINGCAPABILITY)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableThings.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableThings.java:                new RelationOneToMany<>(this, tables.getTableDatastreams(), EntityType.DATASTREAM, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableThings.java:                new RelationOneToMany<>(this, tables.getTableMultiDatastreams(), EntityType.MULTIDATASTREAM, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableThings.java:                new RelationOneToMany<>(this, tables.getTableTaskingCapabilities(), EntityType.TASKINGCAPABILITY, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableThings.java:                new RelationOneToMany<>(this, tables.getTableHistLocations(), EntityType.HISTORICALLOCATION, true)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/AbstractTableThings.java:        registerRelation(new RelationManyToMany<>(this, tables.getTableThingsLocations(), tables.getTableLocations(), EntityType.LOCATION)
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:    private Map<EntityType, StaMainTable<J>> tablesByType;
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:    public StaMainTable<J> getTableForType(EntityType type) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:    private Map<EntityType, StaMainTable<J>> createMap() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        EnumMap<EntityType, StaMainTable<J>> map = new EnumMap<>(EntityType.class);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.ACTUATOR, tableActuators);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.DATASTREAM, tableDatastreams);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.FEATUREOFINTEREST, tableFeatures);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.HISTORICALLOCATION, tableHistLocations);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.LOCATION, tableLocations);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.MULTIDATASTREAM, tableMultiDatastreams);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.OBSERVATION, tableObservations);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.OBSERVEDPROPERTY, this.tableObsProperties);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.SENSOR, tableSensors);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.PARTY, tableParties);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.TASK, tableTasks);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.TASKINGCAPABILITY, tableTaskingCapabilities);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:        addAndInit(map, EntityType.THING, tableThings);
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:    private void addAndInit(Map<EntityType, StaMainTable<J>> map, EntityType type, StaTableAbstract<J> table) {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:    public Map<EntityType, StaMainTable<J>> getTablesByType() {
FROST-Server.SQLjooq/src/main/java/de/fraunhofer/iosb/ilt/frostserver/persistence/pgjooq/tables/TableCollection.java:    public TableCollection<J> setTablesByType(Map<EntityType, StaMainTable<J>> tablesByType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:import de.fraunhofer.iosb.ilt.statests.util.EntityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:        for (EntityType entityType : serverSettings.getEnabledEntityTypes()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:        for (EntityType entityType : serverSettings.getEnabledEntityTypes()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:            readNonexistentEntityWithEntityType(entityType);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:        for (EntityType entityType : serverSettings.getEnabledEntityTypes()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:            String response = readEntityWithEntityType(entityType);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:        for (EntityType entityType : serverSettings.getEnabledEntityTypes()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:            readPropertyOfEntityWithEntityType(entityType);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private void readPropertyOfEntityWithEntityType(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:            for (EntityType.EntityProperty property : entityType.getProperties()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private void checkGetPropertyOfEntity(EntityType entityType, Object id, EntityType.EntityProperty property) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private void checkGetPropertyValueOfEntity(EntityType entityType, Object id, EntityType.EntityProperty property) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:        for (EntityType entityType : serverSettings.getEnabledEntityTypes()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:            readRelatedEntityOfEntityWithEntityType(entityType);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private void readRelatedEntityOfEntityWithEntityType(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityTypes List of entity type from EntityType enum list for the
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:            EntityType headEntity = EntityType.getForRelation(headName);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:            boolean isPlural = EntityType.isPlural(headName);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:            if (EntityType.isPlural(headName)) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityTypes List of entity type from EntityType enum list for the
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:            if (EntityType.isPlural(entityTypes.get(entityTypes.size() - 1))) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private String readEntityWithEntityType(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private void readNonexistentEntityWithEntityType(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:                        EntityType entityType = EntityType.getForRelation(name);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private String getEntities(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private HttpResponse getEntity(EntityType entityType, Object id, String property) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private void checkEntitiesAllAspectsForResponse(EntityType entityType, String response) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private void checkEntityAllAspectsForResponse(EntityType entityType, String response) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private void checkEntitiesProperties(EntityType entityType, String response) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private void checkEntityProperties(EntityType entityType, Object response) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:            for (EntityType.EntityProperty property : entityType.getProperties()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private void checkEntitiesRelations(EntityType entityType, String response) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/Capability1Tests.java:    private void checkEntityRelations(EntityType entityType, Object response) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/TestEntityCreator.java:import de.fraunhofer.iosb.ilt.statests.util.EntityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/TestEntityCreator.java:        String responseObservations = getEntities(rootUri, EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/TestEntityCreator.java:        String responseHistLocations = getEntities(rootUri, EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/TestEntityCreator.java:        String urlString = ServiceUrlHelper.buildURLString(rootUri, EntityType.THING, null, null, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/TestEntityCreator.java:            urlString = ServiceUrlHelper.buildURLString(rootUri, EntityType.THING, id, EntityType.TASKING_CAPABILITY, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/TestEntityCreator.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c01sensingcore/TestEntityCreator.java:    private static String getEntities(String rootUri, EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:import de.fraunhofer.iosb.ilt.statests.util.EntityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            postInvalidEntity(EntityType.THING, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            List<EntityType> entityTypesToCheck = new ArrayList<>();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entityTypesToCheck.add(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entityTypesToCheck.add(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entityTypesToCheck.add(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entityTypesToCheck.add(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entityTypesToCheck.add(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            Object thingId = postEntity(EntityType.THING, urlParameters).get("@iot.id");
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            postInvalidEntity(EntityType.DATASTREAM, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            postInvalidEntity(EntityType.DATASTREAM, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            postInvalidEntity(EntityType.DATASTREAM, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entityTypesToCheck.add(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entityTypesToCheck.add(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entityTypesToCheck.add(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entityTypesToCheck.add(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entityTypesToCheck.add(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            Object datastreamId = postEntity(EntityType.DATASTREAM, urlParameters).get("@iot.id");
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            postInvalidEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            postInvalidEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entityTypesToCheck.add(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entityTypesToCheck.add(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            JSONObject entity = postEntity(EntityType.THING, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.LOCATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.SENSOR, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.OBSERVED_PROPERTY, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.FEATURE_OF_INTEREST, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.DATASTREAM, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            patchEntity(EntityType.THING, urlParameters, thingId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.LOCATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            patchEntity(EntityType.THING, urlParameters, thingId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.THING, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.DATASTREAM, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.HISTORICAL_LOCATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            JSONObject entity = postEntity(EntityType.THING, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            Object datastreamId = checkRelatedEntity(serverSettings.getExtensions(), EntityType.THING, thingId, EntityType.DATASTREAM, deepInsertedObj);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            LOCATION_IDS.add(checkRelatedEntity(serverSettings.getExtensions(), EntityType.THING, thingId, EntityType.LOCATION, deepInsertedObj));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            SENSOR_IDS.add(checkRelatedEntity(serverSettings.getExtensions(), EntityType.DATASTREAM, datastreamId, EntityType.SENSOR, deepInsertedObj));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            OBSPROP_IDS.add(checkRelatedEntity(serverSettings.getExtensions(), EntityType.DATASTREAM, datastreamId, EntityType.OBSERVED_PROPERTY, deepInsertedObj));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.DATASTREAM, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            SENSOR_IDS.add(checkRelatedEntity(serverSettings.getExtensions(), EntityType.DATASTREAM, datastreamId, EntityType.SENSOR, deepInsertedObj));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            OBSPROP_IDS.add(checkRelatedEntity(serverSettings.getExtensions(), EntityType.DATASTREAM, datastreamId, EntityType.OBSERVED_PROPERTY, deepInsertedObj));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            OBSERVATION_IDS.add(checkRelatedEntity(serverSettings.getExtensions(), EntityType.DATASTREAM, datastreamId, EntityType.OBSERVATION, deepInsertedObj));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = postEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            FOI_IDS.add(checkRelatedEntity(serverSettings.getExtensions(), EntityType.OBSERVATION, obsId1, EntityType.FEATURE_OF_INTEREST, deepInsertedObj));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            postInvalidEntity(EntityType.DATASTREAM, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            postInvalidEntity(EntityType.DATASTREAM, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            postInvalidEntity(EntityType.DATASTREAM, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            Object thingId = postEntity(EntityType.THING, urlParameters).get(ControlInformation.ID);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            Object datastreamId = postEntity(EntityType.DATASTREAM, urlParameters).get(ControlInformation.ID);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            postInvalidEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            postInvalidEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            JSONObject entity = getEntity(EntityType.THING, thingId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            JSONObject updatedEntity = patchEntity(EntityType.THING, urlParameters, thingId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPatch(EntityType.THING, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.LOCATION, locationId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = patchEntity(EntityType.LOCATION, urlParameters, locationId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPatch(EntityType.LOCATION, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.HISTORICAL_LOCATION, histLocId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = patchEntity(EntityType.HISTORICAL_LOCATION, urlParameters, histLocId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPatch(EntityType.HISTORICAL_LOCATION, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.SENSOR, sensorId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = patchEntity(EntityType.SENSOR, urlParameters, sensorId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPatch(EntityType.SENSOR, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.OBSERVED_PROPERTY, obsPropId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = patchEntity(EntityType.OBSERVED_PROPERTY, urlParameters, obsPropId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPatch(EntityType.OBSERVED_PROPERTY, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.FEATURE_OF_INTEREST, foiId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = patchEntity(EntityType.FEATURE_OF_INTEREST, urlParameters, foiId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPatch(EntityType.FEATURE_OF_INTEREST, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.DATASTREAM, datastreamId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = patchEntity(EntityType.DATASTREAM, urlParameters, datastreamId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPatch(EntityType.DATASTREAM, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = patchEntity(EntityType.DATASTREAM, urlParameters, datastreamId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPatch(EntityType.DATASTREAM, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.OBSERVATION, obsId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = patchEntity(EntityType.OBSERVATION, urlParameters, obsId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPatch(EntityType.OBSERVATION, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            JSONObject entity = getEntity(EntityType.THING, thingId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            JSONObject updatedEntity = updateEntity(EntityType.THING, urlParameters, thingId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPut(EntityType.THING, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.LOCATION, locationId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = updateEntity(EntityType.LOCATION, urlParameters, locationId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPut(EntityType.LOCATION, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.HISTORICAL_LOCATION, histLocId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = updateEntity(EntityType.HISTORICAL_LOCATION, urlParameters, histLocId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPut(EntityType.HISTORICAL_LOCATION, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.SENSOR, sensorId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = updateEntity(EntityType.SENSOR, urlParameters, sensorId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPut(EntityType.SENSOR, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = updateEntity(EntityType.OBSERVED_PROPERTY, urlParameters, obsPropId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPut(EntityType.OBSERVED_PROPERTY, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.FEATURE_OF_INTEREST, foiId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = updateEntity(EntityType.FEATURE_OF_INTEREST, urlParameters, foiId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPut(EntityType.FEATURE_OF_INTEREST, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.DATASTREAM, datastreamId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = updateEntity(EntityType.DATASTREAM, urlParameters, datastreamId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPut(EntityType.DATASTREAM, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            entity = getEntity(EntityType.OBSERVATION, obsId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            updatedEntity = updateEntity(EntityType.OBSERVATION, urlParameters, obsId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            checkPut(EntityType.OBSERVATION, entity, updatedEntity, diffs);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        invalidPatchEntity(EntityType.THING, urlParameters, thingId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        invalidPatchEntity(EntityType.THING, urlParameters, thingId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java://        invalidPatchEntity(EntityType.LOCATION, urlParameters, locationId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java://        invalidPatchEntity(EntityType.HISTORICAL_LOCATION, urlParameters, histLocId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        invalidPatchEntity(EntityType.SENSOR, urlParameters, sensorId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        invalidPatchEntity(EntityType.OBSERVED_PROPERTY, urlParameters, obsPropId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java://        invalidPatchEntity(EntityType.FEATURE_OF_INTEREST, urlParameters, foiId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        invalidPatchEntity(EntityType.DATASTREAM, urlParameters, datastreamId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        invalidPatchEntity(EntityType.DATASTREAM, urlParameters, datastreamId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        invalidPatchEntity(EntityType.DATASTREAM, urlParameters, datastreamId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        invalidPatchEntity(EntityType.DATASTREAM, urlParameters, datastreamId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java://        invalidPatchEntity(EntityType.OBSERVATION, urlParameters, obsId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            deleteEntity(EntityType.OBSERVATION, OBSERVATION_IDS.get(i));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            deleteEntity(EntityType.FEATURE_OF_INTEREST, FOI_IDS.get(i));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            deleteEntity(EntityType.DATASTREAM, DATASTREAM_IDS.get(i));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            deleteEntity(EntityType.OBSERVED_PROPERTY, OBSPROP_IDS.get(i));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            deleteEntity(EntityType.SENSOR, SENSOR_IDS.get(i));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            deleteEntity(EntityType.HISTORICAL_LOCATION, HISTORICAL_LOCATION_IDS.get(i));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            deleteEntity(EntityType.LOCATION, LOCATION_IDS.get(i));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            deleteEntity(EntityType.THING, THING_IDS.get(i));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        for (EntityType type : serverSettings.getEnabledEntityTypes()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntity(EntityType.THING, THING_IDS.get(0));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        List<EntityType> entityTypes = new ArrayList<>();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntity(EntityType.DATASTREAM, DATASTREAM_IDS.get(0));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntity(EntityType.LOCATION, LOCATION_IDS.get(0));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntity(EntityType.HISTORICAL_LOCATION, HISTORICAL_LOCATION_IDS.get(0));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntity(EntityType.SENSOR, SENSOR_IDS.get(0));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntity(EntityType.OBSERVED_PROPERTY, OBSPROP_IDS.get(0));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntity(EntityType.FEATURE_OF_INTEREST, FOI_IDS.get(0));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntity(EntityType.OBSERVATION, OBSERVATION_IDS.get(0));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        entityTypes.add(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param entityType Entity type in from EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private JSONObject getEntity(EntityType entityType, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param entityType Entity type in from EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private JSONObject postEntity(EntityType entityType, String urlParameters) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param entityType Entity type in from EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private void postInvalidEntity(EntityType entityType, String urlParameters) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param entityType Entity type in from EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private static void deleteEntity(EntityType entityType, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param entityType Entity type in from EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private void deleteNonExsistentEntity(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param entityType Entity type in from EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private JSONObject updateEntity(EntityType entityType, String urlParameters, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param entityType Entity type in from EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private JSONObject patchEntity(EntityType entityType, String urlParameters, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param entityType Entity type in from EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private void invalidPatchEntity(EntityType entityType, String urlParameters, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param entityType Entity type in from EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private void checkPatch(EntityType entityType, JSONObject oldEntity, JSONObject newEntity, Map diffs) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            for (EntityType.EntityProperty property : entityType.getProperties()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param entityType Entity type in from EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private void checkPut(EntityType entityType, JSONObject oldEntity, JSONObject newEntity, Map diffs) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            for (EntityType.EntityProperty property : entityType.getProperties()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param parentEntityType The given entity type
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param relationEntityType The relation entity type
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private Object checkRelatedEntity(Set<Extension> extensions, EntityType parentEntityType, Object parentId, EntityType relationEntityType, JSONObject relationObj) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        String urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), parentEntityType, parentId, relationEntityType, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        if (parentEntityType.getRelations(extensions).contains(relationEntityType.singular)) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            String message = "ERROR: Deep inserted " + relationEntityType + " was not created or linked to " + parentEntityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:                message = "ERROR: Deep inserted " + relationEntityType + " is not created correctly.";
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private void checkNotExisting(List<EntityType> entityTypes) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        for (EntityType entityType : entityTypes) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private void checkExisting(List<EntityType> entityTypes) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        for (EntityType entityType : entityTypes) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntityType(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntityType(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntityType(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntityType(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntityType(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntityType(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:        deleteEntityType(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            deleteEntityType(EntityType.ACTUATOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            deleteEntityType(EntityType.TASK);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            deleteEntityType(EntityType.TASKING_CAPABILITY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:     * @param entityType The entity type from EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:    private static void deleteEntityType(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            String urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, null, null, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, THING_IDS.get(0), EntityType.LOCATION, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, THING_IDS.get(0), EntityType.DATASTREAM, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, DATASTREAM_IDS.get(0), EntityType.SENSOR, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, DATASTREAM_IDS.get(0), EntityType.OBSERVED_PROPERTY, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, THING_IDS.get(0), EntityType.HISTORICAL_LOCATION, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, DATASTREAM_IDS.get(0), EntityType.OBSERVATION, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c02cud/Capability2Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, OBSERVATION_IDS.get(0), EntityType.FEATURE_OF_INTEREST, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:import de.fraunhofer.iosb.ilt.statests.util.EntityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityType(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityType(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityType(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityType(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityType(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityType(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityType(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityTypeRelations(EntityType.THING, thingId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityTypeRelations(EntityType.LOCATION, locationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityTypeRelations(EntityType.HISTORICAL_LOCATION, historicalLocationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityTypeRelations(EntityType.DATASTREAM, datastreamId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityTypeRelations(EntityType.SENSOR, sensorId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityTypeRelations(EntityType.OBSERVED_PROPERTY, observedPropertyId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityTypeRelations(EntityType.OBSERVATION, observationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSelectForEntityTypeRelations(EntityType.FEATURE_OF_INTEREST, featureOfInterestId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityType(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityType(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityType(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityType(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityType(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityType(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityType(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeRelations(EntityType.THING, thingId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeRelations(EntityType.LOCATION, locationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeRelations(EntityType.HISTORICAL_LOCATION, historicalLocationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeRelations(EntityType.DATASTREAM, datastreamId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeRelations(EntityType.SENSOR, sensorId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeRelations(EntityType.OBSERVED_PROPERTY, observedPropertyId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeRelations(EntityType.OBSERVATION, observationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeRelations(EntityType.FEATURE_OF_INTEREST, featureOfInterestId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevel(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevel(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevel(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevel(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevel(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevel(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevel(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevel(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevelRelations(EntityType.THING, thingId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevelRelations(EntityType.LOCATION, locationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevelRelations(EntityType.HISTORICAL_LOCATION, historicalLocationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevelRelations(EntityType.DATASTREAM, datastreamId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevelRelations(EntityType.SENSOR, sensorId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevelRelations(EntityType.OBSERVED_PROPERTY, observedPropertyId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevelRelations(EntityType.OBSERVATION, observationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkExpandForEntityTypeMultilevelRelations(EntityType.FEATURE_OF_INTEREST, featureOfInterestId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkNestedExpandForEntity(EntityType.THING, thingId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkNestedExpandForEntity(EntityType.LOCATION, locationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkNestedExpandForEntity(EntityType.HISTORICAL_LOCATION, historicalLocationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkNestedExpandForEntity(EntityType.DATASTREAM, datastreamId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkNestedExpandForEntity(EntityType.SENSOR, sensorId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkNestedExpandForEntity(EntityType.OBSERVED_PROPERTY, observedPropertyId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkNestedExpandForEntity(EntityType.OBSERVATION, observationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkNestedExpandForEntity(EntityType.FEATURE_OF_INTEREST, featureOfInterestId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityType(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityType(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityType(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityType(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityType(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityType(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityType(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityTypeRelation(EntityType.THING, thingId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityTypeRelation(EntityType.LOCATION, locationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityTypeRelation(EntityType.HISTORICAL_LOCATION, historicalLocationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityTypeRelation(EntityType.DATASTREAM, datastreamId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityTypeRelation(EntityType.SENSOR, sensorId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityTypeRelation(EntityType.OBSERVED_PROPERTY, observedPropertyId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityTypeRelation(EntityType.OBSERVATION, observationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkTopForEntityTypeRelation(EntityType.FEATURE_OF_INTEREST, featureOfInterestId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityType(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityType(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityType(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityType(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityType(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityType(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityType(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityTypeRelation(EntityType.THING, thingId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityTypeRelation(EntityType.LOCATION, locationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityTypeRelation(EntityType.HISTORICAL_LOCATION, historicalLocationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityTypeRelation(EntityType.DATASTREAM, datastreamId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityTypeRelation(EntityType.SENSOR, sensorId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityTypeRelation(EntityType.OBSERVED_PROPERTY, observedPropertyId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityTypeRelation(EntityType.OBSERVATION, observationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkSkipForEntityTypeRelation(EntityType.FEATURE_OF_INTEREST, featureOfInterestId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityType(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityType(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityType(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityType(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityType(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityType(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityType(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityTypeRelations(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityTypeRelations(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityTypeRelations(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityTypeRelations(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityTypeRelations(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityTypeRelations(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityTypeRelations(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkOrderbyForEntityTypeRelations(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityType(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityType(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityType(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityType(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityType(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityType(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityType(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityTypeRelations(EntityType.THING, thingId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityTypeRelations(EntityType.LOCATION, locationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityTypeRelations(EntityType.HISTORICAL_LOCATION, historicalLocationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityTypeRelations(EntityType.DATASTREAM, datastreamId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityTypeRelations(EntityType.SENSOR, sensorId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityTypeRelations(EntityType.OBSERVED_PROPERTY, observedPropertyId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityTypeRelations(EntityType.OBSERVATION, observationId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkCountForEntityTypeRelations(EntityType.FEATURE_OF_INTEREST, featureOfInterestId1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityType(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityType(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityType(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityType(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityType(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityType(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityType(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityTypeRelations(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityTypeRelations(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityTypeRelations(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityTypeRelations(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityTypeRelations(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityTypeRelations(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityTypeRelations(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        checkFilterForEntityTypeRelations(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            String urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, null, null, "?$count=true&$top=1&$skip=2&$orderby=phenomenonTime%20asc&$filter=result%20gt%20'3'");
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        String urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, null, null, "?" + URLEncoder.encode(filter, "UTF-8"));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, null, null, "?" + URLEncoder.encode(filter, "UTF-8"));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, null, null, "?" + URLEncoder.encode(filter, "UTF-8"));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, null, null, "?" + URLEncoder.encode(filter, "UTF-8"));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        String urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, null, null, "?" + URLEncoder.encode(filter, "UTF-8"));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, null, null, "?" + URLEncoder.encode(filter, "UTF-8"));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, null, null, "?" + URLEncoder.encode(filter, "UTF-8"));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, null, null, "?" + URLEncoder.encode(filter, "UTF-8"));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkOrderbyForEntityTypeRelations(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                if (!EntityType.isPlural(relation)) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                EntityType relationEntityType = EntityType.getForRelation(relation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                List<EntityType.EntityProperty> properties = relationEntityType.getProperties();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                for (EntityType.EntityProperty property : properties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                    urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), entityType, id, relationEntityType, "?$orderby=" + property.name);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                        String message = "The ordering is not correct for EntityType " + entityType + " orderby property " + property;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                    urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), entityType, id, relationEntityType, "?$orderby=" + property.name + "%20asc");
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                        String message = "The ordering is not correct for EntityType " + entityType + " orderby asc property " + property;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                    urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), entityType, id, relationEntityType, "?$orderby=" + property.name + "%20desc");
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                        String message = "The ordering is not correct for EntityType " + entityType + " orderby desc property " + property;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                for (EntityType.EntityProperty property : properties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                    urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), entityType, id, relationEntityType, orderby);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                            String message = "The ordering is not correct for EntityType " + entityType + " orderby property " + orderProperty;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                    urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), entityType, id, relationEntityType, orderbyAsc);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                            String message = "The ordering is not correct for EntityType " + entityType + " orderby asc property " + orderProperty;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                    urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), entityType, id, relationEntityType, orderbyDesc);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                            String message = "The ordering is not correct for EntityType " + entityType + " orderby desc property " + orderProperty;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkOrderbyForEntityType(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        List<EntityType.EntityProperty> properties = entityType.getProperties();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            for (EntityType.EntityProperty property : properties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                    String msg = "The default ordering is not correct for EntityType " + entityType + " orderby property " + property.name;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                    String msg = "The ascending ordering is not correct for EntityType " + entityType + " orderby asc property " + property.name;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                    String msg = "The descending ordering is not correct for EntityType " + entityType + " orderby desc property " + property.name;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            for (EntityType.EntityProperty property : properties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                        String message = "The ordering is not correct for EntityType " + entityType + " orderby property " + orderProperty;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                        String message = "The ordering is not correct for EntityType " + entityType + " orderby asc property " + orderProperty;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                        String message = "The ordering is not correct for EntityType " + entityType + " orderby desc property " + orderProperty;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkSkipForEntityType(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkSkipForEntityTypeRelation(EntityType entityType, Object entityId) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            if (!EntityType.isPlural(relation)) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkTopForEntityType(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkTopForEntityTypeRelation(EntityType entityType, Object entityId) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            if (!EntityType.isPlural(relation)) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkSelectForEntityType(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        List<EntityType.EntityProperty> properties = entityType.getProperties();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        for (EntityType.EntityProperty property : properties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        for (EntityType.EntityProperty property : properties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkSelectForEntityTypeRelations(EntityType entityType, Object entityId) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            EntityType relationEntityType = EntityType.getForRelation(parentRelation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            List<EntityType.EntityProperty> properties = relationEntityType.getProperties();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            for (EntityType.EntityProperty property : properties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            for (EntityType.EntityProperty property : properties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkExpandForEntityType(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkExpandForEntityTypeRelations(EntityType entityType, Object entityId) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            EntityType parentRelationEntityType = EntityType.getForRelation(parentRelation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            List<String> relations = parentRelationEntityType.getRelations(serverSettings.getExtensions());
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkExpandForEntityTypeMultilevelRelations(EntityType entityType, Object entityId) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            EntityType parentRelationEntityType = EntityType.getForRelation(parentRelation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            List<String> relations = parentRelationEntityType.getRelations(serverSettings.getExtensions());
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                EntityType relationType = EntityType.getForRelation(relation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                EntityType relationType = EntityType.getForRelation(relation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkExpandForEntityTypeMultilevel(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            EntityType relationType = EntityType.getForRelation(relation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            EntityType relationType = EntityType.getForRelation(relation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkNestedExpandForEntity(EntityType entityType, Object entityId) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            EntityType parentRelationEntityType = EntityType.getForRelation(parentRelation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            List<String> childRelations = parentRelationEntityType.getRelations(serverSettings.getExtensions());
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                EntityType childRelationEntityType = EntityType.getForRelation(childRelation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                parentRelationEntityType.getHalfPropertiesRelations(serverSettings.getExtensions(), query.getSelect(), even);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                childRelationEntityType.getHalfPropertiesRelations(serverSettings.getExtensions(), query.getSelect(), even);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                parentRelationEntityType.getHalfPropertiesRelations(serverSettings.getExtensions(), query2.getSelect(), even);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                EntityType childRelationEntityType = EntityType.getForRelation(childRelation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                childRelationEntityType.getHalfPropertiesRelations(serverSettings.getExtensions(), query3.getSelect(), even);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkCountForEntityType(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkCountForEntityTypeRelations(EntityType entityType, Object entityId) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            if (!EntityType.isPlural(relation)) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkFilterForEntityType(EntityType entityType) throws UnsupportedEncodingException {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:        List<EntityType.EntityProperty> properties = entityType.getProperties();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            EntityType.EntityProperty property = properties.get(i);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:     * @param entityType Entity type from EntityType enum list
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:    private void checkFilterForEntityTypeRelations(EntityType entityType) throws UnsupportedEncodingException {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            if (!EntityType.isPlural(relation)) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            EntityType relationEntityType = EntityType.getForRelation(relation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            List<EntityType.EntityProperty> properties = relationEntityType.getProperties();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                EntityType.EntityProperty property = properties.get(i);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                Comparable propertyValue = EntityPropertiesSampleValue.getPropertyValueFor(relationEntityType, i);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), entityType, id, relationEntityType, "?$filter=" + property.name + "%20lt%20" + propertyValue);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), entityType, id, relationEntityType, "?$filter=" + property.name + "%20le%20" + propertyValue);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), entityType, id, relationEntityType, "?$filter=" + property.name + "%20eq%20" + propertyValue);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), entityType, id, relationEntityType, "?$filter=" + property.name + "%20ne%20" + propertyValue);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), entityType, id, relationEntityType, "?$filter=" + property.name + "%20ge%20" + propertyValue);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:                urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), entityType, id, relationEntityType, "?$filter=" + property.name + "%20gt%20" + propertyValue);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            String urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, null, null, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, thingId1, EntityType.LOCATION, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, thingId1, EntityType.DATASTREAM, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, datastreamId1, EntityType.SENSOR, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, datastreamId1, EntityType.OBSERVED_PROPERTY, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, datastreamId2, EntityType.SENSOR, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, datastreamId2, EntityType.OBSERVED_PROPERTY, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, null, null, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, thingId2, EntityType.LOCATION, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, thingId2, EntityType.DATASTREAM, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, datastreamId3, EntityType.SENSOR, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, datastreamId3, EntityType.OBSERVED_PROPERTY, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, datastreamId4, EntityType.SENSOR, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, thingId1, null, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, thingId2, null, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, thingId1, EntityType.HISTORICAL_LOCATION, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.THING, thingId2, EntityType.HISTORICAL_LOCATION, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, datastreamId1, EntityType.OBSERVATION, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, datastreamId2, EntityType.OBSERVATION, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, datastreamId3, EntityType.OBSERVATION, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.DATASTREAM, datastreamId4, EntityType.OBSERVATION, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, observationId1, EntityType.FEATURE_OF_INTEREST, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, observationId7, EntityType.FEATURE_OF_INTEREST, null);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setGlobalCount(EntityType.DATASTREAM, 4);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setGlobalCount(EntityType.FEATURE_OF_INTEREST, 2);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setGlobalCount(EntityType.HISTORICAL_LOCATION, 4);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setGlobalCount(EntityType.LOCATION, 2);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setGlobalCount(EntityType.OBSERVATION, 12);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setGlobalCount(EntityType.OBSERVED_PROPERTY, 3);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setGlobalCount(EntityType.SENSOR, 4);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setGlobalCount(EntityType.THING, 2);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.THING, thingId1, EntityType.LOCATION, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.THING, thingId2, EntityType.LOCATION, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.THING, thingId1, EntityType.HISTORICAL_LOCATION, 2);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.THING, thingId2, EntityType.HISTORICAL_LOCATION, 2);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.THING, thingId1, EntityType.DATASTREAM, 2);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.THING, thingId2, EntityType.DATASTREAM, 2);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.LOCATION, locationId1, EntityType.THING, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.LOCATION, locationId2, EntityType.THING, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.LOCATION, locationId1, EntityType.HISTORICAL_LOCATION, 2);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.LOCATION, locationId2, EntityType.HISTORICAL_LOCATION, 2);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.HISTORICAL_LOCATION, historicalLocationId1, EntityType.LOCATION, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.HISTORICAL_LOCATION, historicalLocationId2, EntityType.LOCATION, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.HISTORICAL_LOCATION, historicalLocationId3, EntityType.LOCATION, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.HISTORICAL_LOCATION, historicalLocationId4, EntityType.LOCATION, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.DATASTREAM, datastreamId1, EntityType.OBSERVATION, 3);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.DATASTREAM, datastreamId2, EntityType.OBSERVATION, 3);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.DATASTREAM, datastreamId3, EntityType.OBSERVATION, 3);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.DATASTREAM, datastreamId4, EntityType.OBSERVATION, 3);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.SENSOR, sensorId1, EntityType.DATASTREAM, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.SENSOR, sensorId2, EntityType.DATASTREAM, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.SENSOR, sensorId3, EntityType.DATASTREAM, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.SENSOR, sensorId4, EntityType.DATASTREAM, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.OBSERVED_PROPERTY, observedPropertyId1, EntityType.DATASTREAM, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.OBSERVED_PROPERTY, observedPropertyId2, EntityType.DATASTREAM, 2);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.OBSERVED_PROPERTY, observedPropertyId3, EntityType.DATASTREAM, 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.FEATURE_OF_INTEREST, featureOfInterestId1, EntityType.OBSERVATION, 6);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c03filtering/Capability3Tests.java:            ENTITYCOUNTS.setCount(EntityType.FEATURE_OF_INTEREST, featureOfInterestId2, EntityType.OBSERVATION, 6);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c05multidatastream/EntityTypeMds.java:public enum EntityTypeMds {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c05multidatastream/EntityTypeMds.java:    private static final Map<String, EntityTypeMds> NAMES_MAP = new HashMap<>();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c05multidatastream/EntityTypeMds.java:        for (EntityTypeMds entityType : EntityTypeMds.values()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c05multidatastream/EntityTypeMds.java:    public static EntityTypeMds getForRelation(String relation) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c05multidatastream/EntityTypeMds.java:        EntityTypeMds entityType = NAMES_MAP.get(relation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c05multidatastream/EntityTypeMds.java:    private EntityTypeMds(String singular, String plural) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c05multidatastream/MultiDatastreamTests.java:        for (String property : EntityTypeMds.MULTI_DATASTREAM.getProperties()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c05multidatastream/MultiDatastreamTests.java:        for (String relation : EntityTypeMds.MULTI_DATASTREAM.getRelations()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c06dataarrays/DataArrayTests.java:import de.fraunhofer.iosb.ilt.statests.util.EntityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c06dataarrays/DataArrayTests.java:        String urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, null, null, "?$count=true&$top=3&$resultFormat=dataArray");
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c06dataarrays/DataArrayTests.java:        String urlString = ServiceUrlHelper.buildURLString(serverSettings.getServiceUrl(version), EntityType.OBSERVATION, null, null, "?$count=true&$top=4&$resultFormat=dataArray&$select=result,phenomenonTime&$orderby=phenomenonTime%20desc");
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:import de.fraunhofer.iosb.ilt.statests.util.EntityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:        entityHelper.deleteEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:        mqttHelper.publish(mqttHelper.getTopic(EntityType.OBSERVATION), createdObservation.toString());
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:                EntityType.OBSERVATION,
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:        entityHelper.deleteEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:        mqttHelper.publish(mqttHelper.getTopic(EntityType.DATASTREAM, datastreamId, "Observations"), createdObservation.toString());
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:                EntityType.OBSERVATION,
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:        entityHelper.deleteEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:        mqttHelper.publish(mqttHelper.getTopic(EntityType.FEATURE_OF_INTEREST, featureOfInterestId, "Observations"), createdObservation.toString());
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:                EntityType.OBSERVATION,
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:        entityHelper.deleteEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:        mqttHelper.publish(mqttHelper.getTopic(EntityType.OBSERVATION), createdObservation.toString());
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:                EntityType.OBSERVATION,
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:            EntityType relationType = null;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c07mqttcreate/Capability7Tests.java:                relationType = EntityType.getForRelation(key);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:import de.fraunhofer.iosb.ilt.statests.util.EntityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.DATASTREAM;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.FEATURE_OF_INTEREST;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.HISTORICAL_LOCATION;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.LOCATION;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.OBSERVATION;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.OBSERVED_PROPERTY;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.SENSOR;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.THING;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private static final List<EntityType> ENTITY_TYPES_FOR_CREATE = Arrays.asList(
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private static final List<EntityType> ENTITY_TYPES_FOR_DEEP_INSERT = Arrays.asList(
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private static final List<EntityType> ENTITY_TYPES_FOR_DELETE = Arrays.asList(
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private static final Map<EntityType, Object> IDS = new HashMap<>();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:        entityHelper.deleteEntityType(OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:        entityHelper.deleteEntityType(FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:        ENTITY_TYPES_FOR_DEEP_INSERT.stream().forEach((EntityType entityType) -> {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:            List<String> topics = new ArrayList<>(deepInsertInfo.getSubEntityTypes().size() + 1);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:            topics.add(mqttHelper.getTopic(deepInsertInfo.getEntityType()));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:            deepInsertInfo.getSubEntityTypes().stream().forEach((subType) -> {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:            JSONObject entity = entityHelper.getEntity(deepInsertInfo.getEntityType(), result.getActionResult());
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:            Optional<JSONObject> rootResult = result.getMessages().entrySet().stream().filter(x -> x.getKey().equals(mqttHelper.getTopic(deepInsertInfo.getEntityType()))).map(x -> x.getValue()).findFirst();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:            assertJsonEqualsWithLinkResolving(entity, rootResult.get(), mqttHelper.getTopic(deepInsertInfo.getEntityType()));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:            deepInsertInfo.getSubEntityTypes().stream().forEach((subType) -> {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:                JSONObject subEntity = getSubEntityByRoot(deepInsertInfo.getEntityType(), result.getActionResult(), subType);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private void checkSubscribeSelectInsert(EntityType entityType, List<String> selectedProperties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private void checkSubscribePut(EntityType entityType, List<String> selectedProperties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private void checkSubscribePatch(EntityType entityType, List<String> selectedProperties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private Callable<Object> getDeepInsertEntityAction(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:            throw new IllegalArgumentException("Unknown EntityType '" + entityType.toString() + "'");
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private Callable<Object> getInsertEntityAction(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:            throw new IllegalArgumentException("Unknown EntityType '" + entityType.toString() + "'");
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private String getPathToRelatedEntity(EntityType sourceEntityType, EntityType destinationEntityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:        queue.offer(new BFSStructure(sourceEntityType, ""));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:                EntityType relatedType = EntityType.getForRelation(relation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:                if (relatedType.equals(destinationEntityType)) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private List<String> getSelectedProperties(EntityType entityType, boolean even) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private JSONObject getSubEntityByRoot(EntityType rootEntityType, Object rootId, EntityType subtEntityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:            String path = getPathToRelatedEntity(subtEntityType, rootEntityType);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:            path = "/" + subtEntityType.getRootEntitySet() + "?$count=true&$filter=" + path + "/id%20eq%20" + Utils.quoteIdForUrl(rootId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private Callable<JSONObject> getUpdatePatchEntityAction(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:    private Callable<JSONObject> getUpdatePutEntityAction(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:        EntityType entityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/c08mqttsubscribe/Capability8Tests.java:        public BFSStructure(EntityType entityType, String path) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/ServerSettings.java:import de.fraunhofer.iosb.ilt.statests.util.EntityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/ServerSettings.java:    private final Set<EntityType> enabledEntityTypes = EnumSet.noneOf(EntityType.class);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/ServerSettings.java:        for (EntityType entityType : EntityType.values()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/ServerSettings.java:            getEnabledEntityTypes().add(entityType);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/ServerSettings.java:     * @return the enabledEntityTypes
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/ServerSettings.java:    public Set<EntityType> getEnabledEntityTypes() {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/ServerSettings.java:        return enabledEntityTypes;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:    private final Map<EntityType, Long> globalCounts = new EnumMap<>(EntityType.class);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:    private final Map<EntityType, Map<Object, Map<EntityType, Long>>> linkedCounts = new EnumMap<>(EntityType.class);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:    public long getCount(EntityType type) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:    public long getCount(EntityType parentType, Object parentId, EntityType linkedType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:        Map<Object, Map<EntityType, Long>> parents = linkedCounts.get(parentType);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:        Map<EntityType, Long> parent = parents.get(parentId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:    private Map<Object, Map<EntityType, Long>> getParents(EntityType type) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:        Map<Object, Map<EntityType, Long>> parents = linkedCounts.get(type);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:    private Map<EntityType, Long> getCounts(EntityType parentType, Object parentId) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:        Map<Object, Map<EntityType, Long>> parents = getParents(parentType);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:        Map<EntityType, Long> parent = parents.get(parentId);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:            parent = new EnumMap<>(EntityType.class);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:    public EntityCounts setGlobalCount(EntityType type, long count) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityCounts.java:    public EntityCounts setCount(EntityType parentType, Object parentId, EntityType linkedType, long count) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    private final Map<EntityType, Object> latestEntities = new HashMap<>();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:        deleteEntityType(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:        deleteEntityType(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:        deleteEntityType(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:        deleteEntityType(EntityType.HISTORICAL_LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:        deleteEntityType(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:        deleteEntityType(EntityType.THING);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:        deleteEntityType(EntityType.ACTUATOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:        deleteEntityType(EntityType.TASKING_CAPABILITY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:        deleteEntityType(EntityType.TASK);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:        deleteEntityType(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:        deleteEntityType(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:     * @param entityType The entity type from EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    public void deleteEntityType(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:            JSONObject entity = postEntity(EntityType.DATASTREAM, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:            JSONObject entity = postEntity(EntityType.DATASTREAM, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:            JSONObject entity = postEntity(EntityType.FEATURE_OF_INTEREST, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:            JSONObject entity = postEntity(EntityType.HISTORICAL_LOCATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:            JSONObject entity = postEntity(EntityType.LOCATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:            JSONObject entity = postEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:            JSONObject entity = postEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:            JSONObject entity = postEntity(EntityType.OBSERVATION, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:            JSONObject entity = postEntity(EntityType.OBSERVED_PROPERTY, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:            JSONObject entity = postEntity(EntityType.SENSOR, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:            JSONObject entity = postEntity(EntityType.THING, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:            JSONObject entity = postEntity(EntityType.THING, urlParameters);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    public void deleteEntity(EntityType entityType, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    public DeepInsertInfo getDeepInsertInfo(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:                result.getSubEntityTypes().add(EntityType.LOCATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:                result.getSubEntityTypes().add(EntityType.DATASTREAM);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:                result.getSubEntityTypes().add(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:                result.getSubEntityTypes().add(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:                result.getSubEntityTypes().add(EntityType.OBSERVATION);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:                result.getSubEntityTypes().add(EntityType.OBSERVED_PROPERTY);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:                result.getSubEntityTypes().add(EntityType.SENSOR);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:                result.getSubEntityTypes().add(EntityType.FEATURE_OF_INTEREST);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    public JSONObject getEntity(EntityType entityType, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    public Object getLastestEntityId(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    public JSONObject getAnyEntity(EntityType entityType, String queryOptions, int retries) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    public Map<String, Object> getEntityChanges(EntityType entityType, List<String> selectedProperties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    public Map<String, Object> getEntityChanges(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    public JSONObject patchEntity(EntityType entityType, Map<String, Object> changes, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    public JSONObject putEntity(EntityType entityType, Map<String, Object> changes, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    public JSONObject updateEntitywithPATCH(EntityType entityType, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    public JSONObject updateEntitywithPUT(EntityType entityType, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityHelper.java:    private JSONObject postEntity(EntityType entityType, String urlParameters) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityPropertiesSampleValue.java:     * @param entityType The type of the entity in the format of EntityType enum
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityPropertiesSampleValue.java:    public static Comparable getPropertyValueFor(EntityType entityType, int index) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityType.java:public enum EntityType {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityType.java:     * The extension that defines this EntityType.
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityType.java:    private static final Map<String, EntityType> NAMES_MAP = new HashMap<>();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityType.java:        for (EntityType entityType : EntityType.values()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityType.java:    public static EntityType getForRelation(String relation) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityType.java:        EntityType entityType = NAMES_MAP.get(relation);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityType.java:    private EntityType(String singular, String plural) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityType.java:    private EntityType(String singular, String plural, Extension extension) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityUtils.java:        EntityType parentType = null;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityUtils.java:            EntityType elementType = element.getEntityType();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityUtils.java:                    String message = "Incorrect count for collection of " + request.getEntityType() + " for request: '" + request.toString() + "'";
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityUtils.java:        EntityType entityType = expand.getEntityType();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityUtils.java:        for (EntityType.EntityProperty property : entityType.getProperties()) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/EntityUtils.java:                long expectedCount = entityCounts.getCount(entityType, entityId, EntityType.getForRelation(propertyName));
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/Expand.java:    public EntityType getEntityType() {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/Expand.java:        return path.get(path.size() - 1).getEntityType();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/DeepInsertInfo.java:import de.fraunhofer.iosb.ilt.statests.util.EntityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/DeepInsertInfo.java:    private final EntityType entityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/DeepInsertInfo.java:    private final List<EntityType> subEntityTypes;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/DeepInsertInfo.java:    public DeepInsertInfo(EntityType entityType, List<EntityType> subEntityTypes) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/DeepInsertInfo.java:        this.subEntityTypes = subEntityTypes;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/DeepInsertInfo.java:    public DeepInsertInfo(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/DeepInsertInfo.java:        this.subEntityTypes = new ArrayList<>();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/DeepInsertInfo.java:    public EntityType getEntityType() {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/DeepInsertInfo.java:    public List<EntityType> getSubEntityTypes() {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/DeepInsertInfo.java:        return subEntityTypes;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:import de.fraunhofer.iosb.ilt.statests.util.EntityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.DATASTREAM;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.FEATURE_OF_INTEREST;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.HISTORICAL_LOCATION;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.LOCATION;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.OBSERVATION;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.OBSERVED_PROPERTY;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.SENSOR;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:import static de.fraunhofer.iosb.ilt.statests.util.EntityType.THING;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:    public List<String> getRelativeTopicsForEntity(EntityType entityType, Map<EntityType, Object> ids) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:                throw new IllegalArgumentException("Unknown EntityType '" + entityType.toString() + "'");
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:    public List<String> getRelativeTopicsForEntitySet(EntityType entityType, Map<EntityType, Object> ids) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:                throw new IllegalArgumentException("Unknown EntityType '" + entityType.toString() + "'");
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:    public String getTopic(EntityType entityType, List<String> selectedProperties) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:    public String getTopic(EntityType entityType, Object id, String property) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:    public String getTopic(EntityType entityType, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:    public String getTopic(EntityType entityType) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/mqtt/MqttHelper.java:    private String getTopic(EntityType entityType, Map<EntityType, Object> ids) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/PathElement.java:    private final EntityType entityType;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/PathElement.java:    public PathElement(EntityType entityType, boolean plural, Object id) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/PathElement.java:        entityType = EntityType.getForRelation(pathPart);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/PathElement.java:        plural = EntityType.isPlural(pathPart);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/PathElement.java:    public EntityType getEntityType() {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/Query.java:        Map<EntityType, Expand> expandMap = new EnumMap<>(EntityType.class);
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/Query.java:            EntityType entityType = reNest.getEntityType();
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/ServiceUrlHelper.java:     * Build the URL String based on the entityType, parent EntityType and id,
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/ServiceUrlHelper.java:     * @param parentEntityType The entity type of the parent entity
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/ServiceUrlHelper.java:     * @param relationEntityType The entity type of the targeted entity
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/ServiceUrlHelper.java:    public static String buildURLString(String rootURI, EntityType parentEntityType, Object parentId, EntityType relationEntityType, String property) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/ServiceUrlHelper.java:        urlString += "/" + parentEntityType.plural;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/ServiceUrlHelper.java:        if (relationEntityType != null) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/ServiceUrlHelper.java:            if (parentEntityType.getRelations(relationEntityType.extension).contains(relationEntityType.singular)) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/ServiceUrlHelper.java:                urlString += "/" + relationEntityType.singular;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/ServiceUrlHelper.java:            } else if (parentEntityType.getRelations(relationEntityType.extension).contains(relationEntityType.plural)) {
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/ServiceUrlHelper.java:                urlString += "/" + relationEntityType.plural;
FROST-Server.Tests/src/test/java/de/fraunhofer/iosb/ilt/statests/util/ServiceUrlHelper.java:                Assert.fail("Entity type relation is not recognized in SensorThings API : " + parentEntityType + " and " + relationEntityType);
Plugins/FormatCsv/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/format/csv/ResultFormatterCsv.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
Plugins/FormatCsv/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/format/csv/ResultFormatterCsv.java:        EntityType type = path.getMainElementType();
Plugins/FormatCsv/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/format/csv/tools/CsvElementSet.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
Plugins/FormatCsv/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/format/csv/tools/CsvElementSet.java:    public void initFrom(EntityType type, Query query) {
Plugins/FormatDataArray/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/format/dataarray/ResultFormatterDataArray.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
Plugins/FormatDataArray/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/format/dataarray/ResultFormatterDataArray.java:            if (lastElement instanceof PathElementEntitySet && ((PathElementEntitySet) lastElement).getEntityType() == EntityType.OBSERVATION) {
Plugins/FormatDataArray/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/format/dataarray/ResultFormatterDataArray.java:                if (entitySet.getEntityType() == EntityType.OBSERVATION) {
Plugins/FormatGeoJson/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/format/geojson/ResultFormatterGeoJson.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
Plugins/FormatGeoJson/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/format/geojson/ResultFormatterGeoJson.java:        EntityType type = path.getMainElementType();
Plugins/FormatGeoJson/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/format/geojson/tools/GjElementSet.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
Plugins/FormatGeoJson/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/format/geojson/tools/GjElementSet.java:    public void initFrom(EntityType type, Query query) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:import de.fraunhofer.iosb.ilt.frostserver.model.EntityType;
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:        for (EntityType entityType : EntityType.values()) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static OAPath createPathForSet(GeneratorContext context, String path, EntityType entityType, boolean withId) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static OAPath createPathForSetRef(GeneratorContext context, String path, EntityType entityType, boolean withId) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static OAResponse createEntitySetGet200Response(GeneratorContext context, EntityType entityType) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static OAResponse createEntitySetPost201Response(GeneratorContext context, EntityType entityType) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static void createEntitySetSchema(GeneratorContext context, EntityType entityType) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static OAPath createPathForEntity(GeneratorContext context, String path, EntityType entityType) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static OAResponse createEntityGet200Response(GeneratorContext context, EntityType entityType) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static OAResponse createEntityPatch200Response(GeneratorContext context, EntityType entityType) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static OAResponse createEntityDelete200Response(GeneratorContext context, EntityType entityType) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static void createEntitySchema(GeneratorContext context, EntityType entityType) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static void addPathsForSet(OADoc document, int level, Map<String, OAPath> paths, String base, EntityType entityType, GeneratorContext options) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static void addPathsForEntity(OADoc document, int level, Map<String, OAPath> paths, String base, EntityType entityType, GeneratorContext options) {
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:                EntityType type = navProp.getType();
Plugins/OpenApi/src/main/java/de/fraunhofer/iosb/ilt/frostserver/plugin/openapi/spec/OpenApiGenerator.java:    private static void addPathsForEntityProperties(EntityType entityType, Map<String, OAPath> paths, String base, GeneratorContext options) {
